import {
  created,
  noContent,
  ok,
  accepted,
  nonAuthoritativeInformation,
  resetContent,
  partialContent,
  multiStatus,
} from "./success";
import {
  badRequest,
  unauthorized,
  paymentRequired,
  forbidden,
  notFound,
  methodNotAllowed,
  notAcceptable,
  proxyAuthenticationRequired,
  requestTimeout,
  conflict,
  gone,
  lengthRequired,
  preconditionFailed,
  requestEntityTooLarge,
  requestURITooLong,
  unsupportedMediaType,
  requestedRangeNotSatisfiable,
  expectationFailed,
  ImATeapot,
  insufficientSpaceOnResource,
  methodFailure,
  unProcessableEntity,
  locked,
  failedDependency,
  tooManyRequests,
  requestHeaderFieldsTooLarge,
  unavailableForLegalReasons,
} from "./clientError";
import {
  internalServerError,
  notImplemented,
  badGateway,
  serviceUnavailable,
  gatewayTimeout,
  httpVersionNotSupported,
  insufficientStorage,
  networkAuthenticationRequired,
} from "./serverError";
import {
  multipleChoices,
  movedPermanently,
  movedTemporarily,
  seeOther,
  notModified,
  useProxy,
  temporaryRedirect,
  permanentRedirect,
} from "./redirection";

export const httpResult = {
  success: {
    ok,
    noContent,
    created,
    accepted,
    nonAuthoritativeInformation,
    resetContent,
    partialContent,
    multiStatus,
  },
  redirection: {
    multipleChoices,
    movedPermanently,
    movedTemporarily,
    seeOther,
    notModified,
    useProxy,
    temporaryRedirect,
    permanentRedirect,
  },
  serverError: {
    internalServerError,
    notImplemented,
    badGateway,
    serviceUnavailable,
    gatewayTimeout,
    httpVersionNotSupported,
    insufficientStorage,
    networkAuthenticationRequired,
  },
  clientError: {
    badRequest,
    unauthorized,
    paymentRequired,
    forbidden,
    notFound,
    methodNotAllowed,
    notAcceptable,
    proxyAuthenticationRequired,
    requestTimeout,
    conflict,
    gone,
    lengthRequired,
    preconditionFailed,
    requestEntityTooLarge,
    requestURITooLong,
    unsupportedMediaType,
    requestedRangeNotSatisfiable,
    expectationFailed,
    ImATeapot,
    insufficientSpaceOnResource,
    methodFailure,
    unProcessableEntity,
    locked,
    failedDependency,
    tooManyRequests,
    requestHeaderFieldsTooLarge,
    unavailableForLegalReasons,
  },
};

